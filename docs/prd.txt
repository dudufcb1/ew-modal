# Documento de Requisitos de Producto (PRD): Especialista en WP Modal

**Versi√≥n:** 2.0 (Versi√≥n Mejorada)  
**Fecha:** 10 de julio de 2025  

## 1. Visi√≥n General y Objetivo üéØ

**Especialista en WP Modal** es un plugin moderno para WordPress que permite crear modales interactivos de captura de leads con formularios multi-paso. El enfoque principal es un **sistema unificado** donde tanto bloques de Gutenberg como shortcodes cl√°sicos compartan la misma l√≥gica de backend y endpoints.

### Principios Fundamentales:
- **Arquitectura API-First**: Todo funciona a trav√©s de endpoints REST personalizados
- **Compatibilidad Universal**: Bloques + Shortcodes usando el mismo core
- **Scaffold Moderno**: Usar `@wordpress/create-block` como base
- **Formularios Multi-Paso**: Sistema de progreso visual como se muestra en las im√°genes

## 2. Arquitectura T√©cnica Moderna üõ†Ô∏è

### 2.1. Base del Proyecto
```bash
# Inicializaci√≥n con scaffold oficial
npx @wordpress/create-block ewm-modal-cta
```

### 2.2. Estructura de Datos Unificada
```php
// Custom Post Type principal
register_post_type('ew_modal', [
    'public' => false,
    'show_ui' => true,
    'supports' => ['title'],
    'show_in_rest' => true
]);

// Meta fields principales - Arquitectura flexible para campos
$meta_fields = [
    'ewm_modal_mode',           // 'formulario' | 'anuncio'
    'ewm_steps_config',         // JSON con configuraci√≥n de pasos (Opci√≥n A)
    'ewm_steps_serialized',     // String serializado para casos complejos (Opci√≥n B)
    'ewm_use_serialized',       // Boolean: true = usar serialized, false = usar JSON
    'ewm_design_config',        // JSON con estilos
    'ewm_trigger_config',       // JSON con triggers
    'ewm_wc_integration',       // JSON con datos de WooCommerce
    'ewm_display_rules',        // JSON con reglas de visualizaci√≥n
    'ewm_field_mapping'         // JSON para mapeo de campos personalizados
];

// Ejemplo de flexibilidad arquitect√≥nica
if (get_post_meta($modal_id, 'ewm_use_serialized', true)) {
    $steps_data = unserialize(get_post_meta($modal_id, 'ewm_steps_serialized', true));
} else {
    $steps_data = json_decode(get_post_meta($modal_id, 'ewm_steps_config', true), true);
}
```

### 2.3. Endpoints REST Unificados
```php
// Todos estos endpoints ser√°n usados tanto por Gutenberg como por el Builder
register_rest_route('ewm/v1', '/modals', [
    'methods' => ['GET', 'POST'],
    'callback' => 'ewm_handle_modals'
]);

register_rest_route('ewm/v1', '/modals/(?P<id>\d+)', [
    'methods' => ['GET', 'PUT', 'DELETE'],
    'callback' => 'ewm_handle_modal_single'
]);

register_rest_route('ewm/v1', '/submit-form', [
    'methods' => 'POST',
    'callback' => 'ewm_handle_form_submission'
]);

register_rest_route('ewm/v1', '/wc-coupons', [
    'methods' => 'GET',
    'callback' => 'ewm_get_wc_coupons'  // Para seleccionar cupones
]);
```

## 3. Sistema Dual: Bloques + Shortcodes üîÑ

### 3.1. Bloque de Gutenberg (M√©todo Principal)
```json
{
    "name": "ewm/modal-cta",
    "title": "Modal CTA Multi-Paso",
    "category": "widgets",
    "attributes": {
        "modalId": {
            "type": "string",
            "default": ""
        },
        "autoGenerateShortcode": {
            "type": "boolean", 
            "default": true
        }
    },
    "usesContext": ["postId", "postType"],
    "providesContext": {
        "ewm/modalId": "modalId"
    }
}
```

**Flujo del Bloque:**
1. Usuario agrega bloque `ewm/modal-cta`
2. Configura modal usando la interfaz de Gutenberg
3. Al guardar, se crea/actualiza el CPT `ew_modal` v√≠a REST API
4. **Auto-genera shortcode**: `[ew_modal id="modal-123"]`
5. El bloque renderiza usando el mismo sistema que los shortcodes

### 3.2. Modal Builder (Para Temas Cl√°sicos)
- **Ubicaci√≥n**: `wp-admin/admin.php?page=ewm-modal-builder`
- **Tecnolog√≠a Backend**: jQuery + WordPress REST API (solo en admin)
- **Tecnolog√≠a Frontend**: Vanilla JS puro (para el render del modal)
- **Funci√≥n**: Misma interfaz que Gutenberg pero standalone
- **Output**: Genera shortcode `[ew_modal id="modal-nombre"]`

**Importante**: El builder usa jQuery solo en la interfaz de administraci√≥n. El modal renderizado en el frontend siempre usa Vanilla JS, independientemente de si viene de un bloque o shortcode.

### 3.3. Sistema de Shortcodes
```php
// Shortcode principal que renderiza modales
add_shortcode('ew_modal', 'ewm_render_modal_shortcode');

function ewm_render_modal_shortcode($atts) {
    $atts = shortcode_atts([
        'id' => '',
        'trigger' => 'auto' // 'auto', 'manual', 'exit-intent'
    ], $atts);
    
    // Usar el mismo render engine que los bloques
    return ewm_render_modal_core($atts['id'], $atts);
}
```

## 4. Sistema de Formularios Multi-Paso üìã

### 4.1. Arquitectura de Campos Flexibles

El sistema debe soportar dos enfoques para m√°xima flexibilidad:

#### Opci√≥n A: Estructura de Mapa de Campos (Recomendada)
```json
{
    "steps": [
        {
            "id": 1,
            "title": "Increase Your Website Traffic",
            "subtitle": "Answer a few questions to get your personalized plan",
            "fields": [
                {
                    "id": "website_url",
                    "type": "text",
                    "label": "What is the URL of your website?",
                    "placeholder": "https://yourwebsite.com",
                    "required": true,
                    "step": 1,
                    "validation_rules": {
                        "type": "url",
                        "message": "Please enter a valid URL"
                    },
                    "order": 1
                }
            ],
            "button_text": "NEXT",
            "description": "We'll analyze your site for optimization opportunities"
        },
        {
            "id": 2,
            "title": "What's your experience level?",
            "fields": [
                {
                    "id": "experience_level",
                    "type": "radio",
                    "label": "Marketing Experience",
                    "required": true,
                    "step": 2,
                    "options": [
                        {"value": "beginner", "label": "BEGINNER"},
                        {"value": "intermediate", "label": "INTERMEDIATE"},
                        {"value": "advanced", "label": "ADVANCED"}
                    ],
                    "validation_rules": {
                        "type": "required",
                        "message": "Please select your experience level"
                    },
                    "order": 1
                }
            ],
            "description": "This helps us customize your action plan"
        },
        {
            "id": 3,
            "title": "What's your annual revenue?",
            "fields": [
                {
                    "id": "annual_revenue",
                    "type": "select",
                    "label": "Annual Revenue Range",
                    "required": true,
                    "step": 3,
                    "options": [
                        {"value": "0-500k", "label": "0-500K"},
                        {"value": "500k-1m", "label": "500K-1MM"},
                        {"value": "1m-3m", "label": "1MM-3MM"},
                        {"value": "3m+", "label": "3MM+"}
                    ],
                    "validation_rules": {
                        "type": "required"
                    },
                    "order": 1
                }
            ],
            "description": "We want to give you appropriate recommendations"
        }
    ],
    "final_step": {
        "title": "Get Your Personalized Plan",
        "subtitle": "Enter your details to receive your custom strategy",
        "fields": [
            {
                "id": "email",
                "type": "email",
                "label": "Email Address",
                "placeholder": "your@email.com",
                "required": true,
                "step": "final",
                "validation_rules": {
                    "type": "email",
                    "message": "Please enter a valid email"
                },
                "order": 1
            },
            {
                "id": "phone",
                "type": "tel",
                "label": "Phone Number",
                "placeholder": "+52",
                "required": false,
                "step": "final",
                "validation_rules": {
                    "type": "phone"
                },
                "order": 2
            },
            {
                "id": "first_name",
                "type": "text",
                "label": "First Name",
                "required": true,
                "step": "final",
                "validation_rules": {
                    "type": "text",
                    "min_length": 2
                },
                "order": 3
            }
        ]
    },
    "progressBar": {
        "enabled": true,
        "color": "#ff6b35",
        "style": "line" // or "dots"
    }
}
```

#### Opci√≥n B: Campos Serializados (Para Casos Complejos)
```json
{
    "steps_serialized": true,
    "steps_data": "serialized_string_with_custom_structure",
    "custom_renderer": "advanced_form_builder"
}
```

### 4.2. Tipos de Campo Soportados
```php
$supported_field_types = [
    'text' => 'Campo de texto simple',
    'email' => 'Campo de email con validaci√≥n',
    'tel' => 'Campo de tel√©fono',
    'textarea' => '√Årea de texto multi-l√≠nea',
    'select' => 'Lista desplegable',
    'radio' => 'Botones de opci√≥n m√∫ltiple',
    'checkbox' => 'Casillas de verificaci√≥n',
    'number' => 'Campo num√©rico',
    'url' => 'Campo de URL',
    'date' => 'Selector de fecha',
    'file' => 'Subida de archivos (opcional)',
    'hidden' => 'Campo oculto para datos de contexto'
];
```

### 4.3. Sistema de Validaci√≥n Flexible
```json
{
    "validation_rules": {
        "type": "email|url|phone|text|number|required|custom",
        "min_length": 2,
        "max_length": 100,
        "pattern": "regex_pattern",
        "custom_validator": "function_name",
        "message": "Error message to display"
    }
}
```

### 4.2. Componentes de Pasos
- **Barra de Progreso**: Visual como en las im√°genes
- **Navegaci√≥n**: Next/Previous autom√°tico
- **Validaci√≥n**: Por paso antes de avanzar
- **Datos Temporales**: Almacenar en localStorage durante el flujo
- **Env√≠o Final**: Solo al completar todos los pasos

## 5. Especificaciones de Desarrollo üíª

### 5.1. Frontend (P√∫blico)
```javascript
// TODO en Vanilla JS, cero dependencias
class EWMModal {
    constructor(config) {
        this.config = config;
        this.currentStep = 1;
        this.formData = {};
    }
    
    show() { /* Mostrar modal */ }
    nextStep() { /* Avanzar paso */ }
    submitForm() { /* Env√≠o v√≠a fetch() a REST API */ }
}
```

### 5.2. Backend (Admin)
```javascript
// Gutenberg Block - React + WordPress components
import { useSelect, useDispatch } from '@wordpress/data';
import { PanelBody, TextControl } from '@wordpress/components';

// Modal Builder - jQuery (solo en admin)
jQuery(document).ready(function($) {
    // Builder interface usando jQuery para simplicidad en admin
    $('#ewm-add-field').on('click', function() {
        // L√≥gica del builder
    });
});
```

### 5.3. Renderizado Universal (Frontend)
```javascript
// Tanto bloques como shortcodes usan este motor de render
class EWMModalRenderer {
    constructor(config) {
        this.config = config;
        this.currentStep = 1;
        this.formData = {};
        this.totalSteps = config.steps.length;
    }
    
    render() {
        // Render independiente de origen (bloque o shortcode)
        return this.buildModalHTML();
    }
    
    buildModalHTML() {
        // Vanilla JS puro para m√°xima compatibilidad
        const modal = document.createElement('div');
        modal.className = 'ewm-modal-overlay';
        // ... construcci√≥n del DOM
        return modal;
    }
    
    handleStepNavigation() {
        // L√≥gica de navegaci√≥n entre pasos
    }
    
    validateCurrentStep() {
        // Validaci√≥n usando las reglas definidas
    }
    
    submitForm() {
        // Env√≠o v√≠a fetch() a REST API
        fetch('/wp-json/ewm/v1/submit-form', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-WP-Nonce': ewm_vars.nonce
            },
            body: JSON.stringify(this.formData)
        });
    }
}
```

### 5.3. Estructura de Archivos
```
ewm-modal-cta/
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ block/                 # Bloque de Gutenberg
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.js           # React components
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ edit.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ save.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ view.js            # Frontend Vanilla JS
‚îÇ   ‚îú‚îÄ‚îÄ admin/                 # Modal Builder
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ builder.js         # jQuery app para admin
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ builder.css
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ field-manager.js   # Gesti√≥n de campos flexibles
‚îÇ   ‚îú‚îÄ‚îÄ frontend/              # Render engine universal
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ modal-renderer.js  # Vanilla JS - usado por bloques Y shortcodes
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ form-validator.js  # Validaci√≥n vanilla JS
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ modal.css          # Estilos del modal
‚îÇ   ‚îî‚îÄ‚îÄ shared/                # Utilidades compartidas
‚îÇ       ‚îî‚îÄ‚îÄ api-client.js      # Cliente REST API (vanilla fetch)
‚îú‚îÄ‚îÄ includes/
‚îÇ   ‚îú‚îÄ‚îÄ class-modal-cpt.php    # Custom Post Type
‚îÇ   ‚îú‚îÄ‚îÄ class-rest-api.php     # Endpoints REST
‚îÇ   ‚îú‚îÄ‚îÄ class-shortcodes.php   # Sistema de shortcodes
‚îÇ   ‚îî‚îÄ‚îÄ class-wc-integration.php
‚îî‚îÄ‚îÄ assets/
    ‚îú‚îÄ‚îÄ css/
    ‚îî‚îÄ‚îÄ js/
```

## 6. Flujos de Usuario Principales üöÄ

### 6.1. Crear Modal con Gutenberg
1. Agregar bloque `ewm/modal-cta`
2. Configurar pasos en el panel lateral
3. Personalizar dise√±o (colores, tipograf√≠a)
4. Configurar triggers (exit-intent, inactividad)
5. **Guardar post** ‚Üí Auto-crea CPT + shortcode

### 6.2. Crear Modal con Builder Cl√°sico
1. Ir a `WP Admin ‚Üí Modales ‚Üí Crear Nuevo`
2. **Misma interfaz** que Gutenberg pero standalone
3. Configurar usando **los mismos endpoints REST**
4. Obtener shortcode `[ew_modal id="mi-modal"]`
5. Insertar en widgets, p√°ginas, etc.

### 6.3. Modal Multi-Paso en Acci√≥n
1. **Trigger activado** (exit-intent, timer, manual)
2. Modal aparece con **primer paso**
3. Usuario completa campo ‚Üí **Next** (con validaci√≥n)
4. **Barra de progreso** se actualiza
5. **√öltimo paso** ‚Üí Submit ‚Üí Datos enviados v√≠a REST API
6. **Mensaje de √©xito** o redirecci√≥n

## 7. Integraciones y Extensibilidad üîå

### 7.1. WooCommerce
```php
// Selecci√≥n de cupones en la interfaz
$coupons = get_posts([
    'post_type' => 'shop_coupon',
    'post_status' => 'publish'
]);

// Aplicar cup√≥n autom√°ticamente
add_action('ewm_form_success', function($data) {
    if ($data['modal_mode'] === 'coupon') {
        WC()->session->set('ewm_applied_coupon', $data['coupon_code']);
    }
});
```

### 7.2. Hooks para Desarrolladores
```php
// Despu√©s de env√≠o exitoso
do_action('ewm_form_success', $form_data, $modal_id);

// Antes de mostrar modal
apply_filters('ewm_should_show_modal', true, $modal_config);

// Personalizar campos
apply_filters('ewm_form_fields', $fields, $step_id);
```

## 8. Seguridad y Performance ‚ö°

### 8.1. Validaci√≥n y Sanitizaci√≥n
- **Nonces** en todos los endpoints REST
- **Capability checks** para operaciones admin
- **Sanitizaci√≥n** de todos los inputs
- **Honeypot anti-spam** en formularios

### 8.2. Optimizaci√≥n
- **Carga condicional**: Scripts solo donde se necesiten
- **Cache de transients** para reglas de visualizaci√≥n
- **Lazy loading** de configuraciones de modal
- **Minificaci√≥n** autom√°tica en producci√≥n

## 9. Casos de Uso Espec√≠ficos üìä

### 9.1. E-commerce (WooCommerce)
- **Abandono de carrito**: Modal con cup√≥n de descuento
- **Upsell productos**: Modal con productos relacionados
- **Newsletter**: Captura de email con incentivo

### 9.2. Generaci√≥n de Leads
- **Quiz multi-paso**: Como las im√°genes mostradas
- **Descarga de PDF**: A cambio de email
- **Consulta gratuita**: Formulario de contacto avanzado

### 9.3. Engagement
- **Feedback del usuario**: Encuestas r√°pidas
- **Notificaciones**: Anuncios importantes
- **Redirecci√≥n inteligente**: Basada en comportamiento

---

## Conclusi√≥n

Este PRD define un sistema moderno, unificado y extensible que:
- ‚úÖ Usa `@wordpress/create-block` como base
- ‚úÖ Comparte l√≥gica entre bloques y shortcodes
- ‚úÖ Frontend en Vanilla JS puro
- ‚úÖ API REST como √∫nica fuente de verdad
- ‚úÖ Interfaz multi-paso como en las im√°genes
- ‚úÖ Compatible con temas cl√°sicos y modernos
- ‚úÖ Integraci√≥n profunda con WooCommerce

**El resultado**: Un plugin que funciona igual de bien en Gutenberg que en un widget cl√°sico, usando la misma base tecnol√≥gica moderna.